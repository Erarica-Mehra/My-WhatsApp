{"version":3,"sources":["firebase.js","SidebarChat.js","StateProvider.js","Sidebar.js","Chat.js","reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["firebaseApp","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","setSeed","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","unsubscribe","photoURL","IconButton","placeholder","type","room","Chat","input","setInput","roomId","useParams","setRoomName","Date","length","timestamp","toDate","toUTCString","AttachFile","displayName","onChange","e","target","preventDefault","console","log","FieldValue","serverTimestamp","actionTypes","state","action","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a98ef762.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyD4bWnybZvefyJeYAaRnAzrXo8owi6QJQs\",\n    authDomain: \"whatsapp-clone-248c8.firebaseapp.com\",\n    projectId: \"whatsapp-clone-248c8\",\n    storageBucket: \"whatsapp-clone-248c8.appspot.com\",\n    messagingSenderId: \"742952072067\",\n    appId: \"1:742952072067:web:a3c48e0495606427377cb6\",\n    measurementId: \"G-B6GH38DBP5\"\n  };\n\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\n  const db = firebaseApp.firestore(); \n  const auth = firebaseApp.auth();\n  const provider = new firebase.auth.GoogleAuthProvider();\n\n  export {auth,provider};\n  export default db;","import React, {useEffect, useState} from 'react'\nimport './SidebarChat.css'\nimport { Avatar } from '@material-ui/core'\nimport db from './firebase';\nimport {Link} from 'react-router-dom'\n\nfunction SidebarChat({id, name, addNewChat}) {\n//    run some code before the component loads\n\nconst [seed, setSeed] = useState(\"\");\nconst[messages, setMessages] = useState(\"\");\n    \nuseEffect(() => {\n    if(id) {\n        db.collection(\"rooms\").doc(id).collection(\"messages\").orderBy(\"timestamp\", \"desc\")\n        .onSnapshot(snapshot => (\n        setMessages(snapshot.docs.map((doc) => doc.data()))\n        ));\n    }\n }, [id])\n\n    useEffect(() => {\n       setSeed(Math.floor(Math.random() * 5000))\n    }, [])\n\n    const createChat = () => {\n        const roomName = prompt(\"Please enter name for chat\");\n        if(roomName) {\n            // storing to db\n          db.collection(\"rooms\").add({\n          name: roomName,\n        });        \n      }\n    };\n\n    return !addNewChat ?(\n        <Link to = {`/rooms/${id}`}>\n         <div className=\"sidebarChat\">\n            <Avatar src={'https://avatars.dicebear.com/api/human/${seed}.svg'}/>\n            <div className=\"sidebarChat__info\">\n            <h2>{name}</h2>\n            <p>{messages[0]?.message}</p>\n            </div>\n        </div>\n        </Link>\n        \n    ) : (\n        <div onClick={createChat} className=\"sidebarChat\">\n            <h2>Add New Chat</h2>\n        </div>\n    );\n}\n\nexport default SidebarChat\n","import React, { createContext, useContext, useReducer} from 'react'\n// data layer\nexport const StateContext = createContext()\n\nexport const StateProvider =({reducer, initialState, children }) => (\n    <StateContext.Provider  value = {useReducer(reducer, initialState)}>\n        {children}\n    </StateContext.Provider>\n)\n\n// pull information from data layer\nexport const useStateValue = () => useContext(StateContext);\n","import React, {useEffect, useState} from 'react'\nimport './Sidebar.css'\nimport {Avatar, IconButton} from \"@material-ui/core\";\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\nimport ChatIcon from '@material-ui/icons/Chat';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport SearchOutlined from '@material-ui/icons/SearchOutlined';\nimport SidebarChat from './SidebarChat';\nimport db from './firebase';\nimport { useStateValue } from './StateProvider';\n\n\nfunction Sidebar() {\n    const [rooms, setRooms] = useState([]);\n    const[{user}, dispatch] = useStateValue();\n\n    // real time listener\n    useEffect(() => {\n      const unsubscribe =  db.collection(\"rooms\").onSnapshot(snapshot => \n        ( \n           setRooms(snapshot.docs.map(doc =>({\n               id: doc.id,\n               data: doc.data(),\n           })))\n       ));\n       return () => {\n           unsubscribe(); //optimization step to unsubscribe\n       }\n    }, []);\n\n    return (\n   <div className=\"sidebar\"> \n   \n   <div className=\"sidebar__header\"> \n   <Avatar src={user?.photoURL}/>\n   <div className=\"sidebar__headerRight\"> </div>\n   <IconButton>\n      <DonutLargeIcon/>\n   </IconButton>\n   <IconButton>\n       <ChatIcon/>\n   </IconButton>\n   <IconButton>\n       <MoreVertIcon/>\n   </IconButton>\n   </div>\n\n   <div className=\"sidebar__search\"> \n     <div className=\"sidebar__searchContainer\">\n      <SearchOutlined/>\n      <input placeholder=\"Search or start chat\" type=\"text\"></input>\n     </div>\n   </div>\n   \n\n   <div className=\"sidebar_chats\">\n       <SidebarChat addNewChat/>\n           {rooms.map(room=> (\n            <SidebarChat key={room.id} id={room.id} name={room.data.name}/>\n        ))}\n    </div>\n   </div>\n    );\n}\n\nexport default Sidebar","import React, {useState,useEffect} from 'react';\nimport {Avatar, IconButton} from '@material-ui/core';\nimport {AttachFile, SearchOutlined, MessageSharp} from '@material-ui/icons';\nimport MicIcon from '@material-ui/icons/Mic';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport './Chat.css';\nimport { useParams } from 'react-router-dom';\nimport db from './firebase';\nimport firebase from 'firebase';\nimport {useStateValue} from \"./StateProvider\";\nimport firbase from \"./firebase\";\n\nfunction Chat() {\n\n    const [input, setInput] = useState(\"\");\n    const [seed, setSeed] = useState(\"\");\n    const { roomId } = useParams();\n    const [roomName, setRoomName] = useState(\"\");\n    const [messages, setMessages] = useState([]);\n    const [ {user}, dispatch] = useStateValue();\n\n    useEffect(()=>{\n        if(roomId){\n            db.collection('rooms').doc(roomId).onSnapshot(snapshot => {\n                setRoomName(snapshot.data().name);\n            });\n\n            db.collection('rooms').doc(roomId).collection(\"messages\").orderBy(\"timestamp\",\"asc\").onSnapshot(snapshot => {\n                setMessages(snapshot.docs.map(doc => doc.data()))\n            });\n        }\n    },[roomId])\n\n    useEffect(() => {\n       setSeed(Math.floor(Math.random() * 5000))\n    }, [])\n\n    const sendMessage = (e) => {\n        e.preventDefault();\n        console.log(\"You typed >>\", input);\n        db.collection(\"rooms\").doc(roomId).collection(\"messages\").add({\n            message: input,\n            name: user.displayName,\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        });\n        setInput(\"\");\n    }\n\n    return (\n        <div className = \"chat\">\n            \n            <div className = \"chat__header\">\n                <Avatar src={'https://avatars.dicebear.com/api/human/${seed}.svg'}/>\n                <div className = \"chat__headerInfo\">\n                    <h3>{roomName}</h3>\n                    <p>Last Seen at ..\n                    {new Date(messages[messages.length-1]?.timestamp?.toDate()).toUTCString()}\n\n                    </p>\n                </div>\n                <div className = \"chat__headerRight\">\n                    <IconButton><SearchOutlined/></IconButton>\n                    <IconButton><AttachFile/></IconButton>\n                    <IconButton><MoreVertIcon/></IconButton>\n                </div>\n            </div>\n\n            <div className = \"chat__body\">\n                {messages.map(message => (\n                    <p className={`chat__message  ${message.name === user.displayName && \"chat__reciever\"}`}>\n                    <span className=\"chat__name\">{message.name}</span>\n                    {message.message}\n                    <span className=\"chat__timestamp\"> \n                    {new Date(message.timestamp?.toDate()).toUTCString()}\n                    </span>\n                </p>\n                ))}\n            </div>\n\n\n            <div className = \"chat__footer\">\n                <InsertEmoticonIcon/>\n                <form>\n                    <input value = {input} onChange={(e) => setInput(e.target.value)} placeholder=\"Type your message\" type =\"text\"></input>\n                    <button onClick ={sendMessage} type=\"submit\">Send a message</button>\n                </form>\n                <MicIcon/>\n\n            </div>\n\n\n        </div>\n    )\n};\n\nexport default Chat\n","export const initialState = {\n    user: null,\n};\n\nexport const actionTypes = {\n    SET_USER: \"SET_USER\",\n};\n\nconst reducer = (state, action) => {\n    console.log(action);\n    switch(action.type) {\n        case actionTypes.SET_USER:\n            return {\n                ...state, \n                user:action.user,\n            };\n\n            default:\n                return state;\n    }\n};\n\nexport default reducer;","import './Login.css'\nimport React from 'react'\nimport { Button } from '@material-ui/core'\nimport {auth, provider}  from './firebase';\nimport { useStateValue } from './StateProvider';\nimport { actionTypes } from './reducer';\n\nfunction Login() {\n    const[{}, dispatch] = useStateValue();\n\n    const signIn = () => {\n        auth.signInWithPopup(provider).then((result) => {\n            dispatch({\n                type: actionTypes.SET_USER,\n                user: result.user,\n            });\n        }).catch((error) => alert(error.message));\n    };\n\n    return (\n        <div className=\"login\">\n          <div className=\"login__container\">\n              <img src=\"https://upload.wikimedia.org/wikipedia/commons/6/6b/WhatsApp.svg\" alt=\"\"/>\n              <div className=\"login__text\">\n                 <h1> Sign In to Whatsapp</h1>\n               </div>\n              <Button  onClick={signIn}>\n                 Sign In With Google\n              </Button>\n          </div>\n        </div>\n    );\n}\n\nexport default Login;\n","import React, { useState, useEffect} from 'react'\nimport './App.css';\nimport Sidebar from './Sidebar';\nimport Chat from './Chat'\nimport Login from './Login'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { useStateValue } from './StateProvider';\n\nfunction App() {\n  const [{user}, dispatch] = useStateValue();\n\n  //BEM Naming convention\n  return  (\n  <div className=\"app\">\n\n      {!user ? (\n        <Login/>\n      ) : (\n         <div className=\"app__body\">\n         <Router>\n         <Sidebar/>\n           <Switch>\n           <Route path=\"/rooms/:roomId\">\n             <Chat/>\n           </Route>\n           <Route path=\"/\">\n             <h1>Home Screen</h1>\n           </Route>\n           </Switch>\n         </Router>\n       </div>\n     )}\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport reducer, {initialState} from './reducer';\nimport {StateProvider} from './StateProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState ={initialState} reducer ={reducer}>\n    <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister()"],"sourceRoot":""}